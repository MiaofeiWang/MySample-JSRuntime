{"version":3,"file":"functions.js","mappings":"yBA8CA,MAAMA,EAAmB,WAKnBC,EAAuB,UACvBC,EAAiB,QA4rBvBC,gBAAgBC,UAAU,OAruBnB,SAAaC,EAAeC,GACjC,OAAOD,EAAQC,CACjB,IAouBAH,gBAAgBC,UAAU,OA5tBnB,SAAoBG,GAGzB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IAytBAJ,gBAAgBC,UAAU,2BAhtB1B,SAAiCM,EAAiBC,GAChD,IAAIC,EAA4C,KAAT,EAAhBC,KAAKC,SAAe,GAAYJ,EACvD,OAAO,IAAIK,SAASC,IAClBC,YAAW,KACTD,EAAQH,KAAKK,MAAMN,GAAiB,GACnCA,EAAgB,GAEvB,IA0sBAT,gBAAgBC,UAAU,kBAvrB1Be,eAA8BC,GAY5B,MAXkD,CAChDC,KAAM,eACNC,KAAM,OACNC,GAAI,CACFC,SAAUJ,EACVK,SAAUzB,EACV0B,UAAWzB,EACX0B,QAASzB,GAKf,IA2qBAC,gBAAgBC,UAAU,8BA/pB1Be,eAA0CS,GACxC,MAAMC,EAAoB,IAAI1B,gBAAgB2B,MAAM3B,gBAAgB4B,UAAUC,cAC9ExB,QAAQC,IAAK,kCAAiCmB,SAE9C,IAEE,OAuCJ,SAAgCK,GAC9B,MAAMC,EAAmD,CACvDb,KAAM,eACNC,KAAM,OACNC,GAAI,CACFC,SAAUS,EACVR,SAAUzB,EACV0B,UAAWzB,EACX0B,QAASzB,GAEXiC,WAAY,CACV,aAAc,CACZd,KAAM,SACNe,WAAYH,EAAUI,YAExB,eAAgB,CACdhB,KAAM,SACNe,WAAY,QAEd,oBAAqB,CACnBf,KAAM,SACNe,WAAY,sBAGd,aAAc,CACZf,KAAM,kBACNe,WAAY,GACZE,aAAc,eAEhBC,aAAc,CACZlB,KAAM,UACNe,YAAY,IAGhBI,WAAY,CACVC,MAAO,CAAEC,SAAU,gBACnBC,SAAU,CACR,CACEC,OAAQ,OACRT,WAAY,CAAC,eAEf,CACES,OAAQ,OACRH,MAAO,qBACPI,aAAa,EACbC,WAAW,EACXX,WAAY,CAAC,oBAAqB,eAEpC,CACES,OAAQ,OACRH,MAAO,yBACPK,WAAW,EACXX,WAAY,CAAC,oBAoCrB,OA/BAD,EAAoBC,WAAkB,MAAI,CACxCd,KAAM,WACN0B,QAAS,mGAEXb,EAAoBM,WAAWQ,UAAY,CAAEN,SAAU,SAEvDR,EAAoBC,WAAqB,SAAI,CAC3Cd,KAAM,eACNC,KAAM,YACNC,GAAI,CACFC,SAAU,KACVC,SAvJqB,aAwJrBC,UAAWzB,EACX0B,QAASzB,IAIbgC,EAAoBM,WAAWG,SAAS,GAAGR,WAAWc,KAAK,YAE3Df,EAAoBC,WAAqB,SAAI,CAC3Cd,KAAM,eACNC,KAAM,iBACNC,GAAI,CACFC,SAAU,KACVC,SAnKoB,YAoKpBC,UAAWzB,EACX0B,QAASzB,IAIbgC,EAAoBM,WAAWG,SAAS,GAAGR,WAAWc,KAAK,YACpDf,CACT,CAhIWgB,CAD4CC,KAAKC,MAAMxB,GACXJ,SAiCrD,CAAE,MAAO6B,GAEP,MADA7C,QAAQ6C,MAAMA,GACRxB,CACR,CACF,G","sources":["webpack://excel-custom-functions/./src/functions/functions.ts"],"sourcesContent":["/* global clearInterval, console, CustomFunctions, setInterval */\n\n/// <reference path=\"../office-experiment52.d.ts\" />\n\n/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\nexport function add(first: number, second: number): number {\n  return first + second;\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message: string): string {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Simulate latency and return the number in millisecond.\n * @customfunction\n * @param {number} latency Average latency in millisecond\n * @param {any} dependency Only for triggering chained calc.\n * @returns {Promise<number>}\n */\nfunction returnAfterAsyncLatency(latency: number, dependency?: any) {\n  let simulateLatency = (Math.random() * 2 - 1) * 1000 + latency;\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Math.floor(simulateLatency));\n    }, simulateLatency);\n  });\n}\n\n/// Linked entity samples below\n\n// Linked entity data domain constants\nconst productsDomainId = \"products\";\nconst categoriesDomainId = \"categories\";\nconst suppliersDomainId = \"suppliers\";\n\n// Linked entity cell value constants\nconst addinDomainServiceId = 268436224;\nconst defaultCulture = \"en-US\";\n\n/**\n * Custom function which demonstrates insertion of a third-party `LinkedEntityCellValue`.\n * @customfunction\n * @param {string} productId Unique id of the product.\n * @return {Promise<any>} `LinkedEntityCellValue` for the requested product, if found.\n */\nasync function getProductById(productId: string): Promise<any> {\n  const linkedEntity: Excel.LinkedEntityCellValue = {\n    type: \"LinkedEntity\",\n    text: \"Chai\",\n    id: {\n      entityId: productId,\n      domainId: productsDomainId,\n      serviceId: addinDomainServiceId,\n      culture: defaultCulture\n    }\n  };\n\n  return linkedEntity;\n}\n\n\n/**\n * Custom function which acts as the \"service\" or the data provider for a `LinkedEntityDataDomain`, that is\n * called on demand by Excel to resolve/refresh `LinkedEntityCellValue`s of that `LinkedEntityDataDomain`.\n * @customfunction\n * @linkedEntityDataProvider\n * @param {any} linkedEntityId Unique `LinkedEntityId` of the `LinkedEntityCellValue`s which is being\n * requested for resolution/refresh.\n * @return {Promise<any>} Resolved/Updated `LinkedEntityCellValue` that was requested by the passed-in id.\n */\nasync function productLinkedEntityService(linkedEntityId: any): Promise<any> {\n  const notAvailableError = new CustomFunctions.Error(CustomFunctions.ErrorCode.notAvailable);\n  console.log(`Fetching linked entity with id ${linkedEntityId} ...`);\n\n  try {\n    const parsedLinkedEntityId: Excel.LinkedEntityId = JSON.parse(linkedEntityId);\n    return makeSimpleLinkedEntity(parsedLinkedEntityId.entityId);\n    // // Parse the linkedEntityId that was passed-in by Excel.\n    // const parsedLinkedEntityId: Excel.LinkedEntityId = JSON.parse(linkedEntityId);\n\n    // // Identify the domainId of the requested linkedEntityId and call the corresponding function to create\n    // // linked entity cell values for that linked entity data domain.\n    // var linkedEntityResult = null;\n    // switch (parsedLinkedEntityId.domainId) {\n    //   case productsDomainId: {\n    //     linkedEntityResult = makeProductLinkedEntity(parsedLinkedEntityId.entityId);\n    //     break;\n    //   }\n\n    //   case categoriesDomainId: {\n    //     linkedEntityResult = makeCategoryLinkedEntity(parsedLinkedEntityId.entityId);\n    //     break;\n    //   }\n\n    //   case suppliersDomainId: {\n    //     linkedEntityResult = makeSupplierLinkedEntity(parsedLinkedEntityId.entityId);\n    //     break;\n    //   }\n\n    //   default:\n    //     throw notAvailableError;\n    // }\n\n    // if (linkedEntityResult === null) {\n    //   // Throw an error to signify to Excel that resolution/refresh of the requested linkedEntityId failed.\n    //   throw notAvailableError;\n    // }\n\n    // return linkedEntityResult;\n  } catch (error) {\n    console.error(error);\n    throw notAvailableError;\n  }\n}\n\nfunction makeSimpleLinkedEntity(productID: string): any {\n  const productLinkedEntity: Excel.LinkedEntityCellValue = {\n    type: \"LinkedEntity\",\n    text: \"Chai\",\n    id: {\n      entityId: productID,\n      domainId: productsDomainId,\n      serviceId: addinDomainServiceId,\n      culture: defaultCulture\n    },\n    properties: {\n      \"Product ID\": {\n        type: \"String\",\n        basicValue: productID.toString()\n      },\n      \"Product Name\": {\n        type: \"String\",\n        basicValue: \"Chai\"\n      },\n      \"Quantity Per Unit\": {\n        type: \"String\",\n        basicValue: \"10 boxes x 20 bags\"\n      },\n      // Add Unit Price as a formatted number.\n      \"Unit Price\": {\n        type: \"FormattedNumber\",\n        basicValue: 18,\n        numberFormat: \"$* #,##0.00\"\n      },\n      Discontinued: {\n        type: \"Boolean\",\n        basicValue: false\n      }\n    },\n    cardLayout: {\n      title: { property: \"Product Name\" },\n      sections: [\n        {\n          layout: \"List\",\n          properties: [\"Product ID\"]\n        },\n        {\n          layout: \"List\",\n          title: \"Quantity and price\",\n          collapsible: true,\n          collapsed: false,\n          properties: [\"Quantity Per Unit\", \"Unit Price\"]\n        },\n        {\n          layout: \"List\",\n          title: \"Additional information\",\n          collapsed: true,\n          properties: [\"Discontinued\"]\n        }\n      ]\n    }\n  };\n  productLinkedEntity.properties[\"Image\"] = {\n    type: \"WebImage\",\n    address: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Masala_Chai.JPG/320px-Masala_Chai.JPG\"\n  };\n  productLinkedEntity.cardLayout.mainImage = { property: \"Image\" };\n  // Add a deferred nested linked entity for the product category.\n  productLinkedEntity.properties[\"Category\"] = {\n    type: \"LinkedEntity\",\n    text: \"Beverages\",\n    id: {\n      entityId: \"C1\",\n      domainId: categoriesDomainId,\n      serviceId: addinDomainServiceId,\n      culture: defaultCulture\n    }\n  };\n  // Add nested product category to the card layout.\n  productLinkedEntity.cardLayout.sections[0].properties.push(\"Category\");\n  // Add a deferred nested linked entity for the supplier.\n  productLinkedEntity.properties[\"Supplier\"] = {\n    type: \"LinkedEntity\",\n    text: \"Exotic Liquids\",\n    id: {\n      entityId: \"S1\",\n      domainId: suppliersDomainId,\n      serviceId: addinDomainServiceId,\n      culture: defaultCulture\n    }\n  };\n  // Add nested product supplier to the card layout.\n  productLinkedEntity.cardLayout.sections[2].properties.push(\"Supplier\");\n  return productLinkedEntity;\n}\n\n/** Helper function to create linked entity from product properties. */\nfunction makeProductLinkedEntity(productID: string): any {\n  // Search the sample JSON product data for a matching product ID.\n  const product = getProduct(productID);\n  if (product === null) {\n    // Return null if no matching product is found.\n    return null;\n  }\n\n  const productLinkedEntity: Excel.LinkedEntityCellValue = {\n    type: \"LinkedEntity\",\n    text: product.productName,\n    id: {\n      entityId: product.productID,\n      domainId: productsDomainId,\n      serviceId: addinDomainServiceId,\n      culture: defaultCulture\n    },\n    properties: {\n      \"Product ID\": {\n        type: \"String\",\n        basicValue: product.productID\n      },\n      \"Product Name\": {\n        type: \"String\",\n        basicValue: product.productName\n      },\n      \"Quantity Per Unit\": {\n        type: \"String\",\n        basicValue: product.quantityPerUnit\n      },\n      // Add Unit Price as a formatted number.\n      \"Unit Price\": {\n        type: \"FormattedNumber\",\n        basicValue: product.unitPrice,\n        numberFormat: \"$* #,##0.00\"\n      },\n      Discontinued: {\n        type: \"Boolean\",\n        basicValue: product.discontinued\n      }\n    },\n    cardLayout: {\n      title: { property: \"Product Name\" },\n      sections: [\n        {\n          layout: \"List\",\n          properties: [\"Product ID\"]\n        },\n        {\n          layout: \"List\",\n          title: \"Quantity and price\",\n          collapsible: true,\n          collapsed: false,\n          properties: [\"Quantity Per Unit\", \"Unit Price\"]\n        },\n        {\n          layout: \"List\",\n          title: \"Additional information\",\n          collapsed: true,\n          properties: [\"Discontinued\"]\n        }\n      ]\n    }\n  };\n\n  // Add image property to the linked entity and then add it to the card layout.\n  if (product.productImage) {\n    productLinkedEntity.properties[\"Image\"] = {\n      type: \"WebImage\",\n      address: product.productImage\n    };\n    productLinkedEntity.cardLayout.mainImage = { property: \"Image\" };\n  }\n\n  // Add a deferred nested linked entity for the product category.\n  const category = getCategory(product.categoryID.toString());\n  if (category) {\n    productLinkedEntity.properties[\"Category\"] = {\n      type: \"LinkedEntity\",\n      text: category.categoryName,\n      id: {\n        entityId: category.categoryID.toString(),\n        domainId: categoriesDomainId,\n        serviceId: addinDomainServiceId,\n        culture: defaultCulture\n      }\n    };\n\n    // Add nested product category to the card layout.\n    productLinkedEntity.cardLayout.sections[0].properties.push(\"Category\");\n  }\n\n  // Add a deferred nested linked entity for the supplier.\n  const supplier = getSupplier(product.supplierID.toString());\n  if (supplier) {\n    productLinkedEntity.properties[\"Supplier\"] = {\n      type: \"LinkedEntity\",\n      text: supplier.companyName,\n      id: {\n        entityId: supplier.supplierID.toString(),\n        domainId: suppliersDomainId,\n        serviceId: addinDomainServiceId,\n        culture: defaultCulture\n      }\n    };\n\n    // Add nested product supplier to the card layout.\n    productLinkedEntity.cardLayout.sections[2].properties.push(\"Supplier\");\n  }\n\n  return productLinkedEntity;\n}\n\n/** Helper function to create linked entity from category properties. */\nfunction makeCategoryLinkedEntity(categoryID: string): any {\n  // Search the sample JSON category data for a matching category ID.\n  const category = getCategory(categoryID);\n  if (category === null) {\n    // Return null if no matching category is found.\n    return null;\n  }\n\n  const categoryLinkedEntity: Excel.LinkedEntityCellValue = {\n    type: \"LinkedEntity\",\n    text: category.categoryName,\n    id: {\n      entityId: category.categoryID,\n      domainId: categoriesDomainId,\n      serviceId: addinDomainServiceId,\n      culture: defaultCulture\n    },\n    properties: {\n      \"Category ID\": {\n        type: \"String\",\n        basicValue: category.categoryID,\n        propertyMetadata: {\n          // Exclude the category ID property from the card view and auto complete.\n          excludeFrom: {\n            cardView: true,\n            autoComplete: true\n          }\n        }\n      },\n      \"Category Name\": {\n        type: \"String\",\n        basicValue: category.categoryName\n      },\n      Description: {\n        type: \"String\",\n        basicValue: category.description\n      }\n    }\n  };\n\n  return categoryLinkedEntity;\n}\n\n/** Helper function to create linked entity from supplier properties. */\nfunction makeSupplierLinkedEntity(supplierID: string): any {\n  // Search the sample JSON category data for a matching supplier ID.\n  const supplier = getSupplier(supplierID);\n  if (supplier === null) {\n    // Return null if no matching supplier is found.\n    return null;\n  }\n\n  const supplierLinkedEntity: Excel.LinkedEntityCellValue = {\n    type: \"LinkedEntity\",\n    text: supplier.companyName,\n    id: {\n      entityId: supplier.supplierID,\n      domainId: suppliersDomainId,\n      serviceId: addinDomainServiceId,\n      culture: defaultCulture\n    },\n    properties: {\n      \"Supplier ID\": {\n        type: \"String\",\n        basicValue: supplier.supplierID\n      },\n      \"Company Name\": {\n        type: \"String\",\n        basicValue: supplier.companyName\n      },\n      \"Contact Name\": {\n        type: \"String\",\n        basicValue: supplier.contactName\n      },\n      \"Contact Title\": {\n        type: \"String\",\n        basicValue: supplier.contactTitle\n      }\n    },\n    cardLayout: {\n      title: { property: \"Company Name\" },\n      sections: [\n        {\n          layout: \"List\",\n          properties: [\"Supplier ID\", \"Company Name\", \"Contact Name\", \"Contact Title\"]\n        }\n      ]\n    }\n  };\n\n  return supplierLinkedEntity;\n}\n\n/** Get products and product properties. */\nfunction getProduct(productID: string): any {\n  return products.find((p) => p.productID === productID);\n}\n\n/** Get product categories and category properties. */\nfunction getCategory(categoryID: string): any {\n  return categories.find((c) => c.categoryID === categoryID);\n}\n\n/** Get product suppliers and supplier properties. */\nfunction getSupplier(supplierID: string): any {\n  return suppliers.find((s) => s.supplierID === supplierID);\n}\n\n/** Sample JSON product data. */\nconst products = [\n  {\n    productID: \"P1\",\n    productName: \"Chai\",\n    supplierID: \"S1\",\n    categoryID: \"C1\",\n    quantityPerUnit: \"10 boxes x 20 bags\",\n    unitPrice: 18,\n    discontinued: false,\n    productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Masala_Chai.JPG/320px-Masala_Chai.JPG\"\n  },\n  {\n    productID: \"P2\",\n    productName: \"Chang\",\n    supplierID: \"S1\",\n    categoryID: \"C1\",\n    quantityPerUnit: \"24 - 12 oz bottles\",\n    unitPrice: 19,\n    discontinued: false,\n    productImage: \"\"\n  },\n  {\n    productID: \"P3\",\n    productName: \"Aniseed Syrup\",\n    supplierID: \"S1\",\n    categoryID: \"C2\",\n    quantityPerUnit: \"12 - 550 ml bottles\",\n    unitPrice: 10,\n    discontinued: false,\n    productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/81/Maltose_syrup.jpg/185px-Maltose_syrup.jpg\"\n  },\n  {\n    productID: \"P4\",\n    productName: \"Chef Anton's Cajun Seasoning\",\n    supplierID: \"S2\",\n    categoryID: \"C2\",\n    quantityPerUnit: \"48 - 6 oz jars\",\n    unitPrice: 22,\n    discontinued: false,\n    productImage:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/82/Kruidenmengeling-spice.jpg/193px-Kruidenmengeling-spice.jpg\"\n  },\n  {\n    productID: \"P5\",\n    productName: \"Chef Anton's Gumbo Mix\",\n    supplierID: \"S2\",\n    categoryID: \"C2\",\n    quantityPerUnit: \"36 boxes\",\n    unitPrice: 21.35,\n    discontinued: true,\n    productImage:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Okra_in_a_Bowl_%28Unsplash%29.jpg/180px-Okra_in_a_Bowl_%28Unsplash%29.jpg\"\n  },\n  {\n    productID: \"P6\",\n    productName: \"Grandma's Boysenberry Spread\",\n    supplierID: \"S3\",\n    categoryID: \"C2\",\n    quantityPerUnit: \"12 - 8 oz jars\",\n    unitPrice: 25,\n    discontinued: false,\n    productImage:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/10/Making_cranberry_sauce_-_in_the_jar.jpg/90px-Making_cranberry_sauce_-_in_the_jar.jpg\"\n  },\n  {\n    productID: \"P7\",\n    productName: \"Uncle Bob's Organic Dried Pears\",\n    supplierID: \"S3\",\n    categoryID: \"C7\",\n    quantityPerUnit: \"12 - 1 lb pkgs.\",\n    unitPrice: 30,\n    discontinued: false,\n    productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/f/fd/DriedPears.JPG/120px-DriedPears.JPG\"\n  },\n  {\n    productID: \"P8\",\n    productName: \"Northwoods Cranberry Sauce\",\n    supplierID: \"S3\",\n    categoryID: \"C2\",\n    quantityPerUnit: \"12 - 12 oz jars\",\n    unitPrice: 40,\n    discontinued: false,\n    productImage:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Making_cranberry_sauce_-_stovetop.jpg/90px-Making_cranberry_sauce_-_stovetop.jpg\"\n  },\n  {\n    productID: \"P9\",\n    productName: \"Mishi Kobe Niku\",\n    supplierID: \"S4\",\n    categoryID: \"C6\",\n    quantityPerUnit: \"18 - 500 g pkgs.\",\n    unitPrice: 97,\n    discontinued: true,\n    productImage: \"\"\n  },\n  {\n    productID: \"P10\",\n    productName: \"Ikura\",\n    supplierID: \"S4\",\n    categoryID: \"C8\",\n    quantityPerUnit: \"12 - 200 ml jars\",\n    unitPrice: 31,\n    discontinued: false,\n    productImage: \"\"\n  },\n  {\n    productID: \"P11\",\n    productName: \"Queso Cabrales\",\n    supplierID: \"S5\",\n    categoryID: \"C4\",\n    quantityPerUnit: \"1 kg pkg.\",\n    unitPrice: 21,\n    discontinued: false,\n    productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Tilsit_cheese.jpg/190px-Tilsit_cheese.jpg\"\n  },\n  {\n    productID: \"P12\",\n    productName: \"Queso Manchego La Pastora\",\n    supplierID: \"S5\",\n    categoryID: \"C4\",\n    quantityPerUnit: \"10 - 500 g pkgs.\",\n    unitPrice: 38,\n    discontinued: false,\n    productImage: \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/59/Manchego.jpg/177px-Manchego.jpg\"\n  },\n  {\n    productID: \"P13\",\n    productName: \"Konbu\",\n    supplierID: \"S6\",\n    categoryID: \"C8\",\n    quantityPerUnit: \"2 kg box\",\n    unitPrice: 6,\n    discontinued: false,\n    productImage: \"\"\n  },\n  {\n    productID: \"P14\",\n    productName: \"Tofu\",\n    supplierID: \"S6\",\n    categoryID: \"C7\",\n    quantityPerUnit: \"40 - 100 g pkgs.\",\n    unitPrice: 23.25,\n    discontinued: false,\n    productImage:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/Korean.food-Dubu.gui-01.jpg/120px-Korean.food-Dubu.gui-01.jpg\"\n  },\n  {\n    productID: \"P15\",\n    productName: \"Genen Shouyu\",\n    supplierID: \"S6\",\n    categoryID: \"C2\",\n    quantityPerUnit: \"24 - 250 ml bottles\",\n    unitPrice: 15.5,\n    discontinued: false,\n    productImage: \"\"\n  },\n  {\n    productID: \"P16\",\n    productName: \"Pavlova\",\n    supplierID: \"S7\",\n    categoryID: \"C3\",\n    quantityPerUnit: \"32 - 500 g boxes\",\n    unitPrice: 17.45,\n    discontinued: false,\n    productImage: \"\"\n  },\n  {\n    productID: \"P17\",\n    productName: \"Alice Mutton\",\n    supplierID: \"S7\",\n    categoryID: \"C6\",\n    quantityPerUnit: \"20 - 1 kg tins\",\n    unitPrice: 39,\n    discontinued: true,\n    productImage: \"\"\n  },\n  {\n    productID: \"P18\",\n    productName: \"Carnarvon Tigers\",\n    supplierID: \"S7\",\n    categoryID: \"C8\",\n    quantityPerUnit: \"16 kg pkg.\",\n    unitPrice: 62.5,\n    discontinued: false,\n    productImage: \"\"\n  },\n  {\n    productID: \"P19\",\n    productName: \"Teatime Chocolate Biscuits\",\n    supplierID: \"S8\",\n    categoryID: \"C3\",\n    quantityPerUnit: \"10 boxes x 12 pieces\",\n    unitPrice: 9.2,\n    discontinued: false,\n    productImage:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Macau_Koi_Kei_Bakery_Almond_Biscuits_2.JPG/120px-Macau_Koi_Kei_Bakery_Almond_Biscuits_2.JPG\"\n  },\n  {\n    productID: \"P20\",\n    productName: \"Sir Rodney's Marmalade\",\n    supplierID: \"S8\",\n    categoryID: \"C3\",\n    quantityPerUnit: \"30 gift boxes\",\n    unitPrice: 81,\n    discontinued: false,\n    productImage:\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/3/30/Homemade_marmalade%2C_England.jpg/135px-Homemade_marmalade%2C_England.jpg\"\n  }\n];\n\nconst categories = [\n  {\n    categoryID: \"C1\",\n    categoryName: \"Beverages\",\n    description: \"Soft drinks, coffees, teas, beers, and ales\"\n  },\n  {\n    categoryID: \"C2\",\n    categoryName: \"Condiments\",\n    description: \"Sweet and savory sauces, relishes, spreads, and seasonings\"\n  },\n  {\n    categoryID: \"C3\",\n    categoryName: \"Confections\",\n    description: \"Desserts, candies, and sweet breads\"\n  },\n  {\n    categoryID: \"C4\",\n    categoryName: \"Dairy Products\",\n    description: \"Cheeses\"\n  },\n  {\n    categoryID: \"C5\",\n    categoryName: \"Grains/Cereals\",\n    description: \"Breads, crackers, pasta, and cereal\"\n  },\n  {\n    categoryID: \"C6\",\n    categoryName: \"Meat/Poultry\",\n    description: \"Prepared meats\"\n  },\n  {\n    categoryID: \"C7\",\n    categoryName: \"Produce\",\n    description: \"Dried fruit and bean curd\"\n  },\n  {\n    categoryID: \"C8\",\n    categoryName: \"Seafood\",\n    description: \"Seaweed and fish\"\n  }\n];\n\nconst suppliers = [\n  {\n    supplierID: \"S1\",\n    companyName: \"Exotic Liquids\",\n    contactName: \"Charlotte Cooper\",\n    contactTitle: \"Purchasing Manager\"\n  },\n  {\n    supplierID: \"S2\",\n    companyName: \"New Orleans Cajun Delights\",\n    contactName: \"Shelley Burke\",\n    contactTitle: \"Order Administrator\"\n  },\n  {\n    supplierID: \"S3\",\n    companyName: \"Grandma Kelly's Homestead\",\n    contactName: \"Regina Murphy\",\n    contactTitle: \"Sales Representative\"\n  },\n  {\n    supplierID: \"S4\",\n    companyName: \"Tokyo Traders\",\n    contactName: \"Yoshi Nagase\",\n    contactTitle: \"Marketing Manager\",\n    address: \"9-8 Sekimai Musashino-shi\"\n  },\n  {\n    supplierID: \"S5\",\n    companyName: \"Cooperativa de Quesos 'Las Cabras'\",\n    contactName: \"Antonio del Valle Saavedra\",\n    contactTitle: \"Export Administrator\"\n  },\n  {\n    supplierID: \"S6\",\n    companyName: \"Mayumi's\",\n    contactName: \"Mayumi Ohno\",\n    contactTitle: \"Marketing Representative\"\n  },\n  {\n    supplierID: \"S7\",\n    companyName: \"Pavlova, Ltd.\",\n    contactName: \"Ian Devling\",\n    contactTitle: \"Marketing Manager\"\n  },\n  {\n    supplierID: \"S8\",\n    companyName: \"Specialty Biscuits, Ltd.\",\n    contactName: \"Peter Wilson\",\n    contactTitle: \"Sales Representative\"\n  }\n];\n\n\n/// Linked entity samples above\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"RETURNAFTERASYNCLATENCY\", returnAfterAsyncLatency);\nCustomFunctions.associate(\"GETPRODUCTBYID\", getProductById);\nCustomFunctions.associate(\"PRODUCTLINKEDENTITYSERVICE\", productLinkedEntityService);"],"names":["productsDomainId","addinDomainServiceId","defaultCulture","CustomFunctions","associate","first","second","message","console","log","latency","dependency","simulateLatency","Math","random","Promise","resolve","setTimeout","floor","async","productId","type","text","id","entityId","domainId","serviceId","culture","linkedEntityId","notAvailableError","Error","ErrorCode","notAvailable","productID","productLinkedEntity","properties","basicValue","toString","numberFormat","Discontinued","cardLayout","title","property","sections","layout","collapsible","collapsed","address","mainImage","push","makeSimpleLinkedEntity","JSON","parse","error"],"sourceRoot":""}